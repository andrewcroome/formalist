# A DraftJS renderer must have the following rendering methods implemented:
#  1. inline
#  2. block
#  3. entity
#  4. wrapper
#  5. list

# block and entity must iterate over the children and yield each of the children back to the compiler

module Formalist
  class DraftJSHTMLRenderer

    # Defines how to handle a list of nodes
    def list(list, &render_child)
      if block_given?
        list.map{|child| render_child.call(child)}.join
      else
        list.join
      end
    end

    # Defines how to handle a block node
    def block(type, key, children, &render_child)
       type_for_method = type.replace('-', "_")

       rendered_children = children.map{|child| render_child.call(child)}
       send(:"block_#{type_for_method}", key, rendered_children)
    end

    def block_atomic(key, children)
      children.join
    end

    def block_header_one(key, children)
      result = children
      result.unshift("<h1 data-key='#{key}'>")
      result.push("</h1>")
      result.join
    end

    # Defines how to handle a list of blocks with a list type
    def wrapper(type, children)
      type_for_method = type.replace('-', "_")
      rendered_children = children.map{|child| render_child.call(child)}
      send(:"wrapper_#{type_for_method}", rendered_children)
    end

    def wrapper_undordered_list_item(children)
      result = children
      result.unshift("<ul>")
      result.push("</ul>")
      result.join
    end

    def inline(styles)
      ""
    end

    def entity
      ""
    end

  end
end